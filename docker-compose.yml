services:
  #app:
  #  build:
  #    context: .
  #    dockerfile: ./docker/app/Dockerfile
  #  environment:
  #    - APP_DB_URL=${APP_DB_URL}
  #  depends_on:
  #    - db_1
  #  user: "${UID}:${GID}"
  #  restart: unless-stopped

  db_1:
    image: docker.io/postgres:17.4-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=postgres
    volumes:
      - ${CONTAINER_DATA_ROOT}/db_1:/var/lib/postgresql/data
    restart: unless-stopped

  nginx:
    build:
      context: ./docker/nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
      - "443:443"
#    depends_on:
#      - app
    volumes:
      - ${CONTAINER_DATA_ROOT}/certbot/etc_letsencrypt:/etc/letsencrypt
      - ${CONTAINER_DATA_ROOT}/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do nginx -g \"daemon off;\"; sleep 12h && nginx -s reload; done;'"
    restart: unless-stopped
    networks:
      - default

  certbot:
    # This service is used to renew the certificates.  It runs every 24 hours.
    # It uses the webroot plugin to renew the certificates.  It needs to be run
    # in the same network as the nginx service, so it can access the webroot.
    # Since this service only renews existing certificate it relies on the
    # certbot-new service to create the first certificate.
    build:
      context: ./docker/certbot
      dockerfile: Dockerfile
    volumes:
      - ${CONTAINER_DATA_ROOT}/certbot/etc_letsencrypt:/etc/letsencrypt
      - ${CONTAINER_DATA_ROOT}/certbot/www:/var/www/certbot
    depends_on:
      - nginx
    user: "${UID}:${GID}"
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew --webroot -w /var/www/certbot; sleep 24h & wait $${!}; done;'"
    restart: unless-stopped

  certbot-new:
    # Special service to create the first certificate.
    # Run this container ONCE on initial server set-up
    # or when domain changes need a new certificate.
    # This service will remove all existing certificates before creating a new one:
    # Port 80 must be free, so shutwown nginx before running this service.
    # Run as:
    #    docker compose --profile install run --rm certbot-new  
    profiles:
      - install
    image: docker.io/certbot/certbot
    environment:
      - CERTBOT_EMAIL=${CERTBOT_EMAIL}
      - CERTBOT_DOMAINS=${CERTBOT_DOMAINS}
      - CERTBOT_STAGING=${CERTBOT_STAGING}
    volumes:
      - ${CONTAINER_DATA_ROOT}/certbot/etc_letsencrypt:/etc/letsencrypt
      - ${CONTAINER_DATA_ROOT}/certbot/www:/var/www/certbot
    network_mode: host
    entrypoint: "/bin/sh -x -c 'rm -rf /etc/letsencrypt/* && certbot certonly -v --standalone --non-interactive --agree-tos --email $CERTBOT_EMAIL --domains $CERTBOT_DOMAINS $( [ \"$CERTBOT_STAGING\" = \"true\" ] && echo \"--staging\" ) && exit'"
    restart: no
